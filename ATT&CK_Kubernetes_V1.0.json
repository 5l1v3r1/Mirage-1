{
    "description":  "Matrix ATT\u0026CK for Kubernetes from Microsoft",
    "version":  "1.0",
    "reference":  "https://www.microsoft.com/security/blog/2020/04/02/attack-matrix-kubernetes/",
    "matrix":  [
                   {
                       "id":  "Ini1",
                       "name":  "Using cloud credentials",
                       "description":  "In cases where the Kubernetes cluster is deployed in a public cloud (like AKS in Azure, GKE in GCP, or EKS in AWS), compromised cloud credential can lead to cluster takeover. Attackers who have access to the cloud account credentials can get access to the cluster�s management layer.",
                       "reference":  ""
                   },
                   {
                       "id":  "Ini2",
                       "name":  "Compromised images in registry",
                       "description":  "Running a compromised image in a cluster can compromise the cluster. Attackers who get access to a private registry can plant their own compromised images in the registry. The latter can then be pulled by a user. In addition, users often use untrusted images from public registries (such as Docker Hub) that may be malicious. Building images based on untrusted base images can also lead to similar results.",
                       "reference":  ""
                   },
                   {
                       "id":  "Ini3",
                       "name":  "Kubeconfig file",
                       "description":  "The kubeconfig file, also used by kubectl, contains details about Kubernetes clusters including their location and credentials. If the cluster is hosted as a cloud service (such as AKS or GKE), this file is downloaded to the client via cloud commands (like az aks get-credential for AKS or gcloud container clusters get-credentials for GKE). If attackers get access to this file, for instance via a compromised client, they can use it for accessing the clusters.",
                       "reference":  ""
                   },
                   {
                       "id":  "Ini4",
                       "name":  "Vulnerable application",
                       "description":  "Running a public-facing vulnerable application in a cluster can enable initial access to the cluster. A container that runs an application that is vulnerable to remote code execution vulnerability (RCE) may be exploited. If service account is mounted to the container (default behavior in Kubernetes), the attacker will be able to send requests to the API server using this service account credentials.",
                       "reference":  ""
                   },
                   {
                       "id":  "Ini5",
                       "name":  "Exposed dashboard",
                       "description":  "The Kubernetes dashboard is a web-based user interface that enables monitoring and managing a Kubernetes cluster. By default, the dashboard exposes an internal endpoint (ClusterIP service). If the dashboard is exposed externally, it can allow unauthenticated remote management of the cluster.",
                       "reference":  ""
                   },
                   {
                       "id":  "Exe1",
                       "name":  "Exec into container",
                       "description":  "Attackers who have permissions, can run malicious commands in containers in the cluster using exec command (kubectl exec). In this method, attackers can use legitimate images, such as an OS image (like Ubuntu) as a backdoor container, and run their malicious code remotely by using kubectl exec.",
                       "reference":  ""
                   },
                   {
                       "id":  "Exe2",
                       "name":  "New container",
                       "description":  "Attackers may attempt to run their code in the cluster by deploying a container. Attackers who have permissions to deploy a pod or a controller in the cluster (such as DaemonSet \\ ReplicaSet\\ Deployment) can create a new resource for running their code.",
                       "reference":  ""
                   },
                   {
                       "id":  "Exe3",
                       "name":  "Application exploit",
                       "description":  "An application that is deployed in the cluster and is vulnerable to a remote code execution vulnerability, or a vulnerability that eventually allows code execution, enables attackers to run code in the cluster. If service account is mounted to the container (default behavior in Kubernetes), the attacker will be able to send requests to the API server using this service account credentials.",
                       "reference":  ""
                   },
                   {
                       "id":  "Exe4",
                       "name":  "SSH server running inside container",
                       "description":  "SSH server that is running inside a container may be used by attackers. If attackers gain valid credentials to a container, whether by brute force attempts or by other methods (such as phishing), they can use it to get remote access to the container by SSH.",
                       "reference":  ""
                   },
                   {
                       "id":  "Per1",
                       "name":  "Backdoor container",
                       "description":  "Attackers run their malicious code in a container in the cluster. By using the Kubernetes controllers such as DaemonSets or Deployments, attackers can ensure that a constant number of containers run in one, or all, the nodes in the cluster.",
                       "reference":  ""
                   },
                   {
                       "id":  "Per2",
                       "name":  "Writable hostPath mount",
                       "description":  "hostPath volume mounts a directory or a file from the host to the container. Attackers who have permissions to create a new container in the cluster may create one with a writable hostPath volume and gain persistence on the underlying host. For example, the latter can be achieved by creating a cron job on the host.",
                       "reference":  ""
                   },
                   {
                       "id":  "Per3",
                       "name":  "Kubernetes CronJob",
                       "description":  "Kubernetes Job is a controller that creates one or more pods and ensures that a specified number of them successfully terminate. Kubernetes Job can be used to run containers that perform finite tasks for batch jobs. Kubernetes CronJob is used to schedule Jobs. Attackers may use Kubernetes CronJob for scheduling execution of malicious code that would run as a container in the cluster.",
                       "reference":  ""
                   },
                   {
                       "id":  "Pri1",
                       "name":  "Privileged container",
                       "description":  "A privileged container is a container that has all the capabilities of the host machine, which lifts all the limitations regular containers have. Practically, this means that privileged containers can do almost every action that can be performed directly on the host. Attackers who gain access to a privileged container, or have permissions to create a new privileged container (by using the compromised pod�s service account, for example), can get access to the host�s resources.",
                       "reference":  ""
                   },
                   {
                       "id":  "Pri2",
                       "name":  "Cluster-admin binding",
                       "description":  "Role-based access control (RBAC) is a key security feature in Kubernetes. RBAC can restrict the allowed actions of the various identities in the cluster. Cluster-admin is a built-in high privileged role in Kubernetes. Attackers who have permissions to create bindings and cluster-bindings in the cluster can create a binding to the cluster-admin ClusterRole or to other high privileges roles.",
                       "reference":  ""
                   },
                   {
                       "id":  "Pri3",
                       "name":  "hostPath mount",
                       "description":  "hostPath mount can be used by attackers to get access to the underlying host and thus break from the container to the host.",
                       "reference":  ""
                   },
                   {
                       "id":  "Pri4",
                       "name":  "Access cloud resources",
                       "description":  "If the Kubernetes cluster is deployed in the cloud, in some cases attackers can leverage their access to a single container in order to get access to other cloud resources outside the cluster. For example, in AKS each node contains service principal credential that is stored in /etc/kubernetes/azure.json. AKS uses this service principal to create and manage Azure resources that are needed for the cluster operation. By default, the service principal has contributor permissions in the cluster�s Resource Group. Attackers who get access to this service principal file (by hostPath mount, for example) can use its credentials to access or modify the cloud resources.",
                       "reference":  ""
                   },
                   {
                       "id":  "Def1",
                       "name":  "Clear container logs",
                       "description":  "Attackers may delete the application or OS logs on a compromised container in an attempt to prevent detection of their activity.",
                       "reference":  ""
                   },
                   {
                       "id":  "Def2",
                       "name":  "Delete Kubernetes events",
                       "description":  "A Kubernetes event is a Kubernetes object that logs state changes and failures of the resources in the cluster. Example events are a container creation, an image pull, or a pod scheduling on a node. Kubernetes events can be very useful for identifying changes that occur in the cluster. Therefore, attackers may want to delete these events (like by using: kubectl delete events�all) in an attempt to avoid detection of their activity in the cluster.",
                       "reference":  ""
                   },
                   {
                       "id":  "Def3",
                       "name":  "Pod / container name similarity",
                       "description":  "Pods that are created by controllers such as Deploymen or DaemonSet have random suffix in their names. Attackers can use this fact and name their backdoor pods as they were created by the existing controllers. For example, an attacker could create a malicious pod named coredns-{random suffix} which would look related to the CoreDNS Deployment. Also, attackers can deploy their containers in the kube-system namespace where the administrative containers reside.",
                       "reference":  ""
                   },
                   {
                       "id":  "Def4",
                       "name":  "Connect from proxy server",
                       "description":  "Attackers may use proxy servers to hide their origin IP. Specifically, attackers often use anonymous networks such as TOR for their activity. This can be used for communicating with the applications themselves or with the API server.",
                       "reference":  ""
                   },
                   {
                       "id":  "Cre1",
                       "name":  "List Kubernetes secrets",
                       "description":  "A Kubernetes secret is an object that lets users store and manage sensitive information, such as passwords and connection strings in the cluster. Secrets can be consumed by reference in the pod configuration. Attackers who have permissions to retrieve the secrets from the API server (by using the pod service account, for example) can access sensitive information that might include credentials to various services.",
                       "reference":  ""
                   },
                   {
                       "id":  "Cre2",
                       "name":  "Mount service principal",
                       "description":  "When the cluster is deployed in the cloud, in some cases attackers can leverage their access to a container in the cluster to gain cloud credentials. For example, in AKS each node contains service principal credential.",
                       "reference":  ""
                   },
                   {
                       "id":  "Cre3",
                       "name":  "Access container service account",
                       "description":  "Service account (SA) represents an application identity in Kubernetes. By default, an SA is mounted to every created pod in the cluster. Using the SA, containers in the pod can send requests to the Kubernetes API server. Attackers who get access to a pod can access the SA token (located in /var/run/secrets/kubernetes.io/serviceaccount/token) and perform actions in the cluster, according to the SA permissions. If RBAC is not enabled, the SA has unlimited permissions in the cluster. If RBAC is enabled, its permissions are determined by the RoleBindings \\ ClusterRoleBindings that are associated with it.",
                       "reference":  ""
                   },
                   {
                       "id":  "Cre4",
                       "name":  "Application credentials in configuration files",
                       "description":  "Developers store secrets in the Kubernetes configuration files, such as environment variables in the pod configuration. Such behavior is commonly seen in clusters that are monitored by Azure Security Center. Attackers who have access to those configurations, by querying the API server or by accessing those files on the developer�s endpoint, can steal the stored secrets and use them.",
                       "reference":  ""
                   },
                   {
                       "id":  "Dis1",
                       "name":  "Access the Kubernetes API server",
                       "description":  "The Kubernetes API server is the gateway to the cluster. Actions in the cluster are performed by sending various requests to the RESTful API. The status of the cluster, which includes all the components that are deployed on it, can be retrieved by the API server. Attackers may send API requests to probe the cluster and get information about containers, secrets, and other resources in the cluster.",
                       "reference":  ""
                   },
                   {
                       "id":  "Dis2",
                       "name":  "Access Kubelet API",
                       "description":  "Kubelet is the Kubernetes agent that is installed on each node. Kubelet is responsible for the proper execution of pods that are assigned to the node. Kubelet exposes a read-only API service that does not require authentication (TCP port 10255). Attackers with network access to the host (for example, via running code on a compromised container) can send API requests to the Kubelet API. Specifically querying https://[NODE IP]:10255/pods/ retrieves the running pods on the node. https://[NODE IP]:10255/spec/ retrieves information about the node itself, such as CPU and memory consumption.",
                       "reference":  ""
                   },
                   {
                       "id":  "Dis3",
                       "name":  "Network mapping",
                       "description":  "Attackers may try to map the cluster network to get information on the running applications, including scanning for known vulnerabilities. By default, there is no restriction on pods communication in Kubernetes. Therefore, attackers who gain access to a single container, may use it to probe the network.",
                       "reference":  ""
                   },
                   {
                       "id":  "Dis4",
                       "name":  "Access Kubernetes dashboard",
                       "description":  "The Kubernetes dashboard is a web-based UI that is used for monitoring and managing the Kubernetes cluster. The dashboard allows users to perform actions in the cluster using its service account (kubernetes-dashboard) with the permissions that are determined by the binding or cluster-binding for this service account. Attackers who gain access to a container in the cluster, can use its network access to the dashboard pod. Consequently, attackers may retrieve information about the various resources in the cluster using the dashboard�s identity.",
                       "reference":  ""
                   },
                   {
                       "id":  "Dis5",
                       "name":  "Instance Metadata API",
                       "description":  "Cloud providers provide instance metadata service for retrieving information about the virtual machine, such as network configuration, disks, and SSH public keys. This service is accessible to the VMs via a non-routable IP address that can be accessed from within the VM only. Attackers who gain access to a container, may query the metadata API service for getting information about the underlying node. For example, in Azure, the following request would retrieve all the metadata information of an instance: http:///metadata/instance?api-version=2019-06-01",
                       "reference":  ""
                   },
                   {
                       "id":  "Lat1",
                       "name":  "Access cloud resources",
                       "description":  "Attackers may move from a compromised container to the cloud environment.",
                       "reference":  ""
                   },
                   {
                       "id":  "Lat2",
                       "name":  "Container service account",
                       "description":  "Attackers who gain access to a container in the cluster may use the mounted service account token for sending requests to the API server, and gaining access to additional resources in the cluster.",
                       "reference":  ""
                   },
                   {
                       "id":  "Lat3",
                       "name":  "Cluster internal networking",
                       "description":  "Kubernetes networking behavior allows traffic between pods in the cluster as a default behavior. Attackers who gain access to a single container may use it for network reachability to another container in the cluster.",
                       "reference":  ""
                   },
                   {
                       "id":  "Lat4",
                       "name":  "Applications credentials in configuration files",
                       "description":  "Developers store secrets in the Kubernetes configuration files, for example, as environment variables in the pod configuration. Using those credentials attackers may gain access to additional resources inside and outside the cluster.",
                       "reference":  ""
                   },
                   {
                       "id":  "Lat5",
                       "name":  "Writable volume mounts on the host",
                       "description":  "Attackers may attempt to gain access to the underlying host from a compromised container.",
                       "reference":  ""
                   },
                   {
                       "id":  "Lat6",
                       "name":  "Access Kubernetes dashboard",
                       "description":  "Attackers who have access to the Kubernetes dashboard may manage the cluster resources and also run their code on the various containers in the cluster using the built-in exec capability of the dashboard. ",
                       "reference":  ""
                   },
                   {
                       "id":  "Lat7",
                       "name":  "Access tiller endpoint",
                       "description":  "Helm is a popular package manager for Kubernetes maintained by CNCF. Tiller is the server-side component of Helm up to version 2. Tiller exposes internal gRPC endpoint in the cluster, listens to port 44134. By default, this endpoint does not require authentication. Attackers may run code on any container that is accessible to the tiller�s service and perform actions in the cluster, using the tiller�s service account, which often has high privileges.",
                       "reference":  ""
                   },
                   {
                       "id":  "Imp1",
                       "name":  "Data destruction",
                       "description":  "Attackers may attempt to destroy data and resources in the cluster. This includes deleting deployments, configurations, storage, and compute resources.",
                       "reference":  ""
                   },
                   {
                       "id":  "Imp2",
                       "name":  "Resource hijacking",
                       "description":  "Attackers may abuse a compromised resource for running tasks. A common abuse is to use compromised resources for running digital currency mining. Attackers who have access to a container in the cluster or have permissions to create new containers may use them for such activity.",
                       "reference":  ""
                   },
                   {
                       "id":  "Imp3",
                       "name":  "Denial of service",
                       "description":  "Attackers may attempt to perform a denial of service attack, which makes the service unavailable to the legitimate users. In container clusters, this include attempts to block the availability of the containers themselves, the underlying nodes, or the API server.",
                       "reference":  ""
                   }
               ]
}
